package id.ac.ui.cs.advprog.eshop.model;

import id.ac.ui.cs.advprog.eshop.enums.OrderStatus;
import id.ac.ui.cs.advprog.eshop.enums.PaymentMethod;
import id.ac.ui.cs.advprog.eshop.enums.PaymentStatus;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class PaymentTest {

    private Map<String, String> cashOnDeliveryData;
    private List<Product> productList;
    private Order sampleOrder;

    @BeforeEach
    public void setup() {
        // Set up payment data for Cash on Delivery
        cashOnDeliveryData = new HashMap<>();
        cashOnDeliveryData.put("address", "123 Main Street");
        cashOnDeliveryData.put("deliveryFee", "15.00");

        // Create a sample product list
        productList = new ArrayList<>();
        Product prod = new Product();
        prod.setProductId("prod-001");
        prod.setProductName("Test Product");
        prod.setProductQuantity(1);
        productList.add(prod);

        // Create a sample order using builder or constructor
        sampleOrder = Order.builder()
                .id("order-123")
                .products(productList)
                .orderTime(1708560000L)
                .author("Tester")
                .status(OrderStatus.WAITING_PAYMENT.getValue())
                .build();
    }

    @Test
    public void testAutoGeneratedPaymentIdForCashOnDelivery() {
        Payment payment = new Payment("order-123",
                PaymentMethod.CASH_ON_DELIVERY.getValue(),
                PaymentStatus.WAITING.getValue(),
                cashOnDeliveryData,
                sampleOrder);
        assertNotNull(payment.getPaymentId(), "Payment ID should be auto-generated.");
    }

    @Test
    public void testValidCashOnDeliveryPayment() {
        // With valid address and delivery fee, payment status should be SUCCESS automatically.
        Payment payment = new Payment("order-123",
                PaymentMethod.CASH_ON_DELIVERY.getValue(),
                PaymentStatus.WAITING.getValue(),
                cashOnDeliveryData,
                sampleOrder);
        assertEquals(PaymentStatus.SUCCESS.getValue(), payment.getPaymentStatus());
    }

    @Test
    public void testCashOnDeliveryPaymentWithEmptyAddress() {
        // If address is empty, payment status should be REJECTED.
        cashOnDeliveryData.put("address", "");
        Payment payment = new Payment("order-123",
                PaymentMethod.CASH_ON_DELIVERY.getValue(),
                PaymentStatus.WAITING.getValue(),
                cashOnDeliveryData,
                sampleOrder);
        assertEquals(PaymentStatus.REJECTED.getValue(), payment.getPaymentStatus());
    }

    @Test
    public void testCashOnDeliveryPaymentWithNullDeliveryFee() {
        // If delivery fee is null, payment status should be REJECTED.
        cashOnDeliveryData.put("deliveryFee", null);
        Payment payment = new Payment("order-123",
                PaymentMethod.CASH_ON_DELIVERY.getValue(),
                PaymentStatus.WAITING.getValue(),
                cashOnDeliveryData,
                sampleOrder);
        assertEquals(PaymentStatus.REJECTED.getValue(), payment.getPaymentStatus());
    }

    @Test
    public void testCashOnDeliveryPaymentDataStorage() {
        Payment payment = new Payment("order-123",
                PaymentMethod.CASH_ON_DELIVERY.getValue(),
                PaymentStatus.WAITING.getValue(),
                cashOnDeliveryData,
                sampleOrder);
        assertEquals(cashOnDeliveryData, payment.getPaymentData());
    }

    @Test
    public void testPaymentWithNullOrderThrowsException() {
        // Creating a Payment with a null order should throw an exception.
        assertThrows(IllegalArgumentException.class, () -> {
            new Payment("order-123",
                    PaymentMethod.CASH_ON_DELIVERY.getValue(),
                    PaymentStatus.WAITING.getValue(),
                    cashOnDeliveryData,
                    null);
        });
    }
}
